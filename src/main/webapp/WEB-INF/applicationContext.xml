<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.0.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

	<!-- 등록된 bean 에 대해서 annotaion 을 활성화 @Autowired 와 @Qualifier -->
	<context:annotation-config />

	<!-- 어노테이션을 이용한 선언적 트렌젝션 관리 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	<!-- basic datasource 클래스를 이용한 DB connection 설정 -->
	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close"
		p:driverClassName="net.sf.log4jdbc.sql.jdbcapi.DriverSpy"		
		p:url="jdbc:log4jdbc:mysql://3.37.151.149/project"
		p:username="**********" p:password="*******" p:initialSize="3"
		p:maxIdle="10" p:minIdle="3" p:validationQuery="SELECT 1" />

	<!-- DataSource를 참조하여 MyBatis와 Mysql 서버를 연동시켜준다. -->
	<bean id="SqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- SQL 이 들어있는 파일 경로를 지정해주기 위해 mapperLocations 프로퍼티 추가-->
		<property name="mapperLocations" value="classpath:/sql/*.xml" />
	</bean>
	<!-- DB connection 정보와 ibatis 연동정보를 가지고 SQL 문을 실행하는 템플릿을 작성 -->
	<bean id="SqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="SqlSession"></constructor-arg>
	</bean>
	<!-- 트렌젝션 관리 -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 트렌젝션 진행 중 exception 이 발생했을 때 롤백이 되도록 설정 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="*" rollback-for="Exception" />
		</tx:attributes>
	</tx:advice>
</beans>